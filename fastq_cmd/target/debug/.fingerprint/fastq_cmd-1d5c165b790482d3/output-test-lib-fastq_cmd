{"message":"can't compare `&str` with `(chrono::DateTime<FixedOffset>, String, String, String, String)`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/macros/mod.rs","byte_start":1235,"byte_end":1237,"line_start":40,"line_end":40,"column_start":32,"column_end":34,"is_primary":true,"text":[],"label":"no implementation for `&str == (chrono::DateTime<FixedOffset>, String, String, String, String)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2523,"byte_end":2593,"line_start":69,"line_end":69,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"    assert_eq!(vec![\"header,sequence,quality.\"],extract(time_hr,contents));","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/macros/mod.rs","byte_start":1065,"byte_end":1087,"line_start":36,"line_end":36,"column_start":1,"column_end":23,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `PartialEq<(chrono::DateTime<FixedOffset>, String, String, String, String)>` is not implemented for `&str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `PartialEq<Rhs>`:\n  <&'a str as PartialEq<OsString>>\n  <&'a str as PartialEq<String>>\n  <&'b str as PartialEq<Cow<'a, str>>>\n  <str as PartialEq<Cow<'a, str>>>\n  <str as PartialEq<OsStr>>\n  <str as PartialEq<OsString>>\n  <str as PartialEq<String>>\n  <str as PartialEq>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Vec<&str>` to implement `PartialEq<Vec<(chrono::DateTime<FixedOffset>, String, String, String, String)>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: can't compare `&str` with `(chrono::DateTime<FixedOffset>, String, String, String, String)`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:69:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    assert_eq!(vec![\"header,sequence,quality.\"],extract(time_hr,contents));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno implementation for `&str == (chrono::DateTime<FixedOffset>, String, String, String, String)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `PartialEq<(chrono::DateTime<FixedOffset>, String, String, String, String)>` is not implemented for `&str`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `PartialEq<Rhs>`:\u001b[0m\n\u001b[0m             <&'a str as PartialEq<OsString>>\u001b[0m\n\u001b[0m             <&'a str as PartialEq<String>>\u001b[0m\n\u001b[0m             <&'b str as PartialEq<Cow<'a, str>>>\u001b[0m\n\u001b[0m             <str as PartialEq<Cow<'a, str>>>\u001b[0m\n\u001b[0m             <str as PartialEq<OsStr>>\u001b[0m\n\u001b[0m             <str as PartialEq<OsString>>\u001b[0m\n\u001b[0m             <str as PartialEq<String>>\u001b[0m\n\u001b[0m             <str as PartialEq>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Vec<&str>` to implement `PartialEq<Vec<(chrono::DateTime<FixedOffset>, String, String, String, String)>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
